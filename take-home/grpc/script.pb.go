// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        v3.17.3
// source: proto/script.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName string `protobuf:"bytes,1,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	Content    string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ScriptRequest) Reset() {
	*x = ScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_script_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptRequest) ProtoMessage() {}

func (x *ScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_script_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptRequest.ProtoReflect.Descriptor instead.
func (*ScriptRequest) Descriptor() ([]byte, []int) {
	return file_proto_script_proto_rawDescGZIP(), []int{0}
}

func (x *ScriptRequest) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *ScriptRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptName    string `protobuf:"bytes,1,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	ScriptStatus  string `protobuf:"bytes,2,opt,name=script_status,json=scriptStatus,proto3" json:"script_status,omitempty"`
	LastRunStatus string `protobuf:"bytes,3,opt,name=last_run_status,json=lastRunStatus,proto3" json:"last_run_status,omitempty"`
	Error         *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Content       string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Output        string `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ScriptResponse) Reset() {
	*x = ScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_script_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptResponse) ProtoMessage() {}

func (x *ScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_script_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptResponse.ProtoReflect.Descriptor instead.
func (*ScriptResponse) Descriptor() ([]byte, []int) {
	return file_proto_script_proto_rawDescGZIP(), []int{1}
}

func (x *ScriptResponse) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *ScriptResponse) GetScriptStatus() string {
	if x != nil {
		return x.ScriptStatus
	}
	return ""
}

func (x *ScriptResponse) GetLastRunStatus() string {
	if x != nil {
		return x.LastRunStatus
	}
	return ""
}

func (x *ScriptResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ScriptResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ScriptResponse) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_script_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_script_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_script_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Error) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

var File_proto_script_proto protoreflect.FileDescriptor

var file_proto_script_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xce, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x43, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0xdc, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_script_proto_rawDescOnce sync.Once
	file_proto_script_proto_rawDescData = file_proto_script_proto_rawDesc
)

func file_proto_script_proto_rawDescGZIP() []byte {
	file_proto_script_proto_rawDescOnce.Do(func() {
		file_proto_script_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_script_proto_rawDescData)
	})
	return file_proto_script_proto_rawDescData
}

var file_proto_script_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_script_proto_goTypes = []interface{}{
	(*ScriptRequest)(nil),  // 0: ScriptRequest
	(*ScriptResponse)(nil), // 1: ScriptResponse
	(*Error)(nil),          // 2: Error
}
var file_proto_script_proto_depIdxs = []int32{
	2, // 0: ScriptResponse.error:type_name -> Error
	0, // 1: ScriptService.CreateTask:input_type -> ScriptRequest
	0, // 2: ScriptService.ExecuteTask:input_type -> ScriptRequest
	0, // 3: ScriptService.GetTaskStatus:input_type -> ScriptRequest
	0, // 4: ScriptService.GetTaskSource:input_type -> ScriptRequest
	1, // 5: ScriptService.CreateTask:output_type -> ScriptResponse
	1, // 6: ScriptService.ExecuteTask:output_type -> ScriptResponse
	1, // 7: ScriptService.GetTaskStatus:output_type -> ScriptResponse
	1, // 8: ScriptService.GetTaskSource:output_type -> ScriptResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_script_proto_init() }
func file_proto_script_proto_init() {
	if File_proto_script_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_script_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_script_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_script_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_script_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_script_proto_goTypes,
		DependencyIndexes: file_proto_script_proto_depIdxs,
		MessageInfos:      file_proto_script_proto_msgTypes,
	}.Build()
	File_proto_script_proto = out.File
	file_proto_script_proto_rawDesc = nil
	file_proto_script_proto_goTypes = nil
	file_proto_script_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScriptServiceClient is the client API for ScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptServiceClient interface {
	CreateTask(ctx context.Context, opts ...grpc.CallOption) (ScriptService_CreateTaskClient, error)
	ExecuteTask(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
	GetTaskStatus(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
	GetTaskSource(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error)
}

type scriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScriptServiceClient(cc grpc.ClientConnInterface) ScriptServiceClient {
	return &scriptServiceClient{cc}
}

func (c *scriptServiceClient) CreateTask(ctx context.Context, opts ...grpc.CallOption) (ScriptService_CreateTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScriptService_serviceDesc.Streams[0], "/ScriptService/CreateTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &scriptServiceCreateTaskClient{stream}
	return x, nil
}

type ScriptService_CreateTaskClient interface {
	Send(*ScriptRequest) error
	CloseAndRecv() (*ScriptResponse, error)
	grpc.ClientStream
}

type scriptServiceCreateTaskClient struct {
	grpc.ClientStream
}

func (x *scriptServiceCreateTaskClient) Send(m *ScriptRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scriptServiceCreateTaskClient) CloseAndRecv() (*ScriptResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ScriptResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scriptServiceClient) ExecuteTask(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, "/ScriptService/ExecuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) GetTaskStatus(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, "/ScriptService/GetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) GetTaskSource(ctx context.Context, in *ScriptRequest, opts ...grpc.CallOption) (*ScriptResponse, error) {
	out := new(ScriptResponse)
	err := c.cc.Invoke(ctx, "/ScriptService/GetTaskSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptServiceServer is the server API for ScriptService service.
type ScriptServiceServer interface {
	CreateTask(ScriptService_CreateTaskServer) error
	ExecuteTask(context.Context, *ScriptRequest) (*ScriptResponse, error)
	GetTaskStatus(context.Context, *ScriptRequest) (*ScriptResponse, error)
	GetTaskSource(context.Context, *ScriptRequest) (*ScriptResponse, error)
}

// UnimplementedScriptServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScriptServiceServer struct {
}

func (*UnimplementedScriptServiceServer) CreateTask(ScriptService_CreateTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedScriptServiceServer) ExecuteTask(context.Context, *ScriptRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (*UnimplementedScriptServiceServer) GetTaskStatus(context.Context, *ScriptRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (*UnimplementedScriptServiceServer) GetTaskSource(context.Context, *ScriptRequest) (*ScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskSource not implemented")
}

func RegisterScriptServiceServer(s *grpc.Server, srv ScriptServiceServer) {
	s.RegisterService(&_ScriptService_serviceDesc, srv)
}

func _ScriptService_CreateTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScriptServiceServer).CreateTask(&scriptServiceCreateTaskServer{stream})
}

type ScriptService_CreateTaskServer interface {
	SendAndClose(*ScriptResponse) error
	Recv() (*ScriptRequest, error)
	grpc.ServerStream
}

type scriptServiceCreateTaskServer struct {
	grpc.ServerStream
}

func (x *scriptServiceCreateTaskServer) SendAndClose(m *ScriptResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scriptServiceCreateTaskServer) Recv() (*ScriptRequest, error) {
	m := new(ScriptRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScriptService_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScriptService/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).ExecuteTask(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScriptService/GetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).GetTaskStatus(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_GetTaskSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).GetTaskSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScriptService/GetTaskSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).GetTaskSource(ctx, req.(*ScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScriptService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ScriptService",
	HandlerType: (*ScriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _ScriptService_ExecuteTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _ScriptService_GetTaskStatus_Handler,
		},
		{
			MethodName: "GetTaskSource",
			Handler:    _ScriptService_GetTaskSource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTask",
			Handler:       _ScriptService_CreateTask_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/script.proto",
}
